import { ResponseContext } from './http/http';
import * as models from './models/all';
import { Configuration} from './configuration'

{{#models}}
{{#model}}
import { {{name}} } from './models/{{name}}';
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}

{{#operations}}
import { {{classname}}RequestFactory, {{classname}}ResponseProcessor} from "./apis/{{classname}}";
export class {{classname}} {
	private requestFactory: {{classname}}RequestFactory;
	private responseProcessor: {{classname}}ResponseProcessor;

	public constructor(private configuration: Configuration) {
		this.requestFactory = new {{classname}}RequestFactory(configuration);
		this.responseProcessor = new {{classname}}ResponseProcessor();
	}

{{#operation}}
    public {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options?: any): Promise<{{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
    	const requestContext = this.requestFactory.{{nickname}}({{#allParams}}{{paramName}}, {{/allParams}}options);

		// build promise chain
    	let middlewarePrePromise =Promise.resolve(requestContext);
    	for (let middleware of this.configuration.middleware) {
    		middlewarePrePromise = middlewarePrePromise.then((ctx) => middleware.pre(ctx));
    	}

    	return middlewarePrePromise.then((ctx) => this.configuration.httpApi.send(ctx)).
	    	then((response: ResponseContext) => {
	    		let middlewarePostPromise = Promise.resolve(response);
	    		for (let middleware of this.configuration.middleware) {
	    			middlewarePostPromise = middlewarePostPromise.then((rsp) => middleware.post(rsp));
	    		}
	    		return middlewarePostPromise.then((rsp) => this.responseProcessor.{{nickname}}(rsp));
	    	});
    }
	
{{/operation}}

}

{{/operations}}


{{/apis}}
{{/apiInfo}}