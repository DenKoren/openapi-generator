import {RequestContext} from '../http/http';
// typings for btoa are incorrect
//@ts-ignore
import * as btoa from "btoa";

export abstract class SecurityAuthentication {

	public constructor(private name: string) {
	
	}
	
	/*
	 * 
	 * @return returns the name of the security authentication as specified in OAI
	 */
	public getName(): string {
		return this.name;
	}
	
	public abstract applySecurityAuthentication(context: RequestContext): void;

}

export class NoAuthentication extends SecurityAuthentication {
	
	public constructor() {
		super("_no_auth");
	}
	
	public applySecurityAuthentication(_context: RequestContext) {
	
	}
}

export class APIKeyAuthentication extends SecurityAuthentication {
	
	public constructor(authName: string, private paramName: string, private keyLocation: "query" | "header" | "cookie", private apiKey: string) {
		super(authName);
	}
		
	public applySecurityAuthentication(context: RequestContext) {
		if (this.keyLocation === "header") {
			context.setHeaderParam(this.paramName, this.apiKey);
		} else if (this.keyLocation === "cookie") {
			context.addCookie(this.paramName, this.apiKey);
		} else if (this.keyLocation === "query") {
			context.setQueryParam(this.paramName, this.apiKey);
		}
	}
}
// TODO: guarantee that auth was configured properly

export class HttpBasicAuthentication extends SecurityAuthentication {
	
	public constructor(authName: string, private username: string, private password: string) {
		super(authName);
	}
	
	public applySecurityAuthentication(context: RequestContext) {
		let comb = this.username + ":" + this.password;
		context.setHeaderParam("Authentication", "Basic " + btoa(comb));
	}
}

export class OAuth2Authentication extends SecurityAuthentication {
	public constructor(authName: string) {
		super(authName);
	}
	
	public applySecurityAuthentication(context: RequestContext) {
		// TODO
	}
}

export type AuthMethods = {
	{{#authMethods}}
		"{{name}}"?: {{#isApiKey}}APIKeyAuthentication{{/isApiKey}}{{#isHttp}}HttpBasicAuthentication{{/isHttp}}{{#isOAuth}}OAuth2Authentication{{/isOAuth}},
	{{/authMethods}}
}

export type ApiKeyConfiguration = string;
export type HttpBasicConfiguration = { "username": string, "password": string };
export type OAuth2Configuration = string;

export type AuthMethodsConfiguration = { {{#authMethods}}"{{name}}"?:{{#isApiKey}}ApiKeyConfiguration{{/isApiKey}}{{#isHttp}}HttpBasicConfiguration{{/isHttp}}{{#isOAuth}}OAuth2Configuration{{/isOAuth}},  {{/authMethods}} }

export function configureAuthMethods(conf: AuthMethodsConfiguration | undefined): AuthMethods {
	let authMethods: AuthMethods = {
	}

	if (!conf) {
		return authMethods;
	}		

	{{#authMethods}}
	if (conf["{{name}}"]) {
		{{#isApiKey}}
		authMethods["{{name}}"] = new APIKeyAuthentication("{{name}}",  "{{keyParamName}}", {{#isKeyInQuery}}"query"{{/isKeyInQuery}}{{#isKeyInHeader}}"header"{{/isKeyInHeader}}{{#isKeyInCookie}}"cookie"{{/isKeyInCookie}}, <string> conf["{{name}}"]);
		{{/isApiKey}}
		{{#isBasic}}
		authMethods["{{name}}"] = new HttpBasicAuthentication("{{name}}", config["{{name}}"]["username"], config["{{name}}"]["password"]);
		{{/isBasic}}
		{{#isOAuth}}
		authMethods["{{name}}"] = new OAuth2Authentication("{{name}}");
		{{/isOAuth}}
	}

	{{/authMethods}}
	return authMethods;
}